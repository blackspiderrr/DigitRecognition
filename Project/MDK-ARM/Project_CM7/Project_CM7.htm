<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Project_CM7\Project_CM7.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Project_CM7\Project_CM7.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Jun 14 09:28:09 2024
<BR><P>
<H3>Maximum Stack Usage =        444 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
forward_conv2d_if32of32wf32_nl_pool &rArr; forward_lite_conv2d_if32of32wf32_pool &rArr; ai_conv2d_kernel_simple_opt_f32
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[f2]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a6]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a6]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[25]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">BusFault_Handler</a><BR>
 <LI><a href="#[23]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">HardFault_Handler</a><BR>
 <LI><a href="#[24]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">MemManage_Handler</a><BR>
 <LI><a href="#[22]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">NMI_Handler</a><BR>
 <LI><a href="#[26]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a6]">ADC3_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[3d]">ADC_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[a8]">BDMA_Channel0_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[a9]">BDMA_Channel1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[aa]">BDMA_Channel2_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[ab]">BDMA_Channel3_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[ac]">BDMA_Channel4_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[ad]">BDMA_Channel5_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[ae]">BDMA_Channel6_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[af]">BDMA_Channel7_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[c2]">BSP_GetTick</a> from stm32h747i_discovery_bus.o(i.BSP_GetTick) referenced from stm32h747i_discovery_ts.o(i.FT6X06_Probe)
 <LI><a href="#[c2]">BSP_GetTick</a> from stm32h747i_discovery_bus.o(i.BSP_GetTick) referenced from main.o(i.LCD_Init)
 <LI><a href="#[bf]">BSP_I2C4_DeInit</a> from stm32h747i_discovery_bus.o(i.BSP_I2C4_DeInit) referenced from stm32h747i_discovery_ts.o(i.FT6X06_Probe)
 <LI><a href="#[be]">BSP_I2C4_Init</a> from stm32h747i_discovery_bus.o(i.BSP_I2C4_Init) referenced from stm32h747i_discovery_ts.o(i.FT6X06_Probe)
 <LI><a href="#[c0]">BSP_I2C4_ReadReg</a> from stm32h747i_discovery_bus.o(i.BSP_I2C4_ReadReg) referenced from stm32h747i_discovery_ts.o(i.FT6X06_Probe)
 <LI><a href="#[c1]">BSP_I2C4_WriteReg</a> from stm32h747i_discovery_bus.o(i.BSP_I2C4_WriteReg) referenced from stm32h747i_discovery_ts.o(i.FT6X06_Probe)
 <LI><a href="#[c9]">BSP_LCD_DrawBitmap</a> from stm32h747i_discovery_lcd.o(i.BSP_LCD_DrawBitmap) referenced from main.o(.constdata)
 <LI><a href="#[cb]">BSP_LCD_DrawHLine</a> from stm32h747i_discovery_lcd.o(i.BSP_LCD_DrawHLine) referenced from main.o(.constdata)
 <LI><a href="#[cc]">BSP_LCD_DrawVLine</a> from stm32h747i_discovery_lcd.o(i.BSP_LCD_DrawVLine) referenced from main.o(.constdata)
 <LI><a href="#[ca]">BSP_LCD_FillRGBRect</a> from stm32h747i_discovery_lcd.o(i.BSP_LCD_FillRGBRect) referenced from main.o(.constdata)
 <LI><a href="#[cd]">BSP_LCD_FillRect</a> from stm32h747i_discovery_lcd.o(i.BSP_LCD_FillRect) referenced from main.o(.constdata)
 <LI><a href="#[d3]">BSP_LCD_GetPixelFormat</a> from stm32h747i_discovery_lcd.o(i.BSP_LCD_GetPixelFormat) referenced from main.o(.constdata)
 <LI><a href="#[ce]">BSP_LCD_ReadPixel</a> from stm32h747i_discovery_lcd.o(i.BSP_LCD_ReadPixel) referenced from main.o(.constdata)
 <LI><a href="#[d2]">BSP_LCD_SetActiveLayer</a> from stm32h747i_discovery_lcd.o(i.BSP_LCD_SetActiveLayer) referenced from main.o(.constdata)
 <LI><a href="#[cf]">BSP_LCD_WritePixel</a> from stm32h747i_discovery_lcd.o(i.BSP_LCD_WritePixel) referenced from main.o(.constdata)
 <LI><a href="#[1a]">BUTTON_WAKEUP_EXTI_Callback</a> from stm32h747i_discovery.o(i.BUTTON_WAKEUP_EXTI_Callback) referenced 2 times from stm32h747i_discovery.o(.data)
 <LI><a href="#[25]">BusFault_Handler</a> from stm32h7xx_it.o(i.BusFault_Handler) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[85]">CEC_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[6b]">CM4_SEV_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[6a]">CM7_SEV_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[b0]">COMP1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[b7]">CRS_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[76]">DCMI_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[95]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[96]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[97]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[98]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[36]">DMA1_Stream0_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[37]">DMA1_Stream1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[38]">DMA1_Stream2_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[39]">DMA1_Stream3_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream4_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream5_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream6_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[59]">DMA1_Stream7_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[81]">DMA2D_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[62]">DMA2_Stream0_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[63]">DMA2_Stream1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[64]">DMA2_Stream2_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[65]">DMA2_Stream3_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[66]">DMA2_Stream4_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream5_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[6d]">DMA2_Stream6_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[6e]">DMA2_Stream7_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[8d]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[a7]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[c6]">DSI_IO_Read</a> from main.o(i.DSI_IO_Read) referenced from main.o(i.LCD_Init)
 <LI><a href="#[c5]">DSI_IO_Write</a> from main.o(i.DSI_IO_Write) referenced from main.o(i.LCD_Init)
 <LI><a href="#[a2]">DSI_IRQHandler</a> from main.o(i.DSI_IRQHandler) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[28]">DebugMon_Handler</a> from stm32h7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[b8]">ECC_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[67]">ETH_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[68]">ETH_WKUP_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[31]">EXTI0_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[53]">EXTI15_10_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[32]">EXTI1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[33]">EXTI2_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[34]">EXTI3_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[35]">EXTI4_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[42]">EXTI9_5_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[3e]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[40]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[3f]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[41]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[69]">FDCAN_CAL_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[2f]">FLASH_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[5a]">FMC_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[78]">FPU_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[18]">FT6X06_ClearIT</a> from ft6x06.o(i.FT6X06_ClearIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[f]">FT6X06_DeInit</a> from ft6x06.o(i.FT6X06_DeInit) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[17]">FT6X06_DisableIT</a> from ft6x06.o(i.FT6X06_DisableIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[16]">FT6X06_EnableIT</a> from ft6x06.o(i.FT6X06_EnableIT) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[10]">FT6X06_GestureConfig</a> from ft6x06.o(i.FT6X06_GestureConfig) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[15]">FT6X06_GetCapabilities</a> from ft6x06.o(i.FT6X06_GetCapabilities) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[14]">FT6X06_GetGesture</a> from ft6x06.o(i.FT6X06_GetGesture) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[13]">FT6X06_GetMultiTouchState</a> from ft6x06.o(i.FT6X06_GetMultiTouchState) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[12]">FT6X06_GetState</a> from ft6x06.o(i.FT6X06_GetState) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[19]">FT6X06_ITStatus</a> from ft6x06.o(i.FT6X06_ITStatus) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[e]">FT6X06_Init</a> from ft6x06.o(i.FT6X06_Init) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[11]">FT6X06_ReadID</a> from ft6x06.o(i.FT6X06_ReadID) referenced 2 times from ft6x06.o(.data)
 <LI><a href="#[ba]">HOLD_CORE_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[94]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[8e]">HRTIM1_Master_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[8f]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[90]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[91]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[92]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[93]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[a4]">HSEM1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[a5]">HSEM2_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[23]">HardFault_Handler</a> from stm32h7xx_it.o(i.HardFault_Handler) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[4b]">I2C1_ER_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[4a]">I2C1_EV_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[4d]">I2C2_ER_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[4c]">I2C2_EV_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[71]">I2C3_ER_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[70]">I2C3_EV_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[87]">I2C4_ER_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[86]">I2C4_EV_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[1c]">JOY1_DOWN_EXTI_Callback</a> from stm32h747i_discovery.o(i.JOY1_DOWN_EXTI_Callback) referenced 2 times from stm32h747i_discovery.o(.data)
 <LI><a href="#[1d]">JOY1_LEFT_EXTI_Callback</a> from stm32h747i_discovery.o(i.JOY1_LEFT_EXTI_Callback) referenced 2 times from stm32h747i_discovery.o(.data)
 <LI><a href="#[1e]">JOY1_RIGHT_EXTI_Callback</a> from stm32h747i_discovery.o(i.JOY1_RIGHT_EXTI_Callback) referenced 2 times from stm32h747i_discovery.o(.data)
 <LI><a href="#[1b]">JOY1_SEL_EXTI_Callback</a> from stm32h747i_discovery.o(i.JOY1_SEL_EXTI_Callback) referenced 2 times from stm32h747i_discovery.o(.data)
 <LI><a href="#[1f]">JOY1_UP_EXTI_Callback</a> from stm32h747i_discovery.o(i.JOY1_UP_EXTI_Callback) referenced 2 times from stm32h747i_discovery.o(.data)
 <LI><a href="#[a0]">JPEG_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[d0]">LCD_GetXSize</a> from main.o(i.LCD_GetXSize) referenced from main.o(.constdata)
 <LI><a href="#[d1]">LCD_GetYSize</a> from main.o(i.LCD_GetYSize) referenced from main.o(.constdata)
 <LI><a href="#[84]">LPTIM1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[b1]">LPTIM2_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[b2]">LPTIM3_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[b3]">LPTIM4_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[b4]">LPTIM5_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[b5]">LPUART1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[80]">LTDC_ER_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[7f]">LTDC_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[9f]">MDIOS_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[9e]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[a1]">MDMA_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[24]">MemManage_Handler</a> from stm32h7xx_it.o(i.MemManage_Handler) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[22]">NMI_Handler</a> from stm32h7xx_it.o(i.NMI_Handler) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[8a]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[89]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[8c]">OTG_FS_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[8b]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[73]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[72]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[75]">OTG_HS_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[74]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[c7]">OTM8009A_ReadRegWrap</a> from otm8009a.o(i.OTM8009A_ReadRegWrap) referenced from otm8009a.o(i.OTM8009A_RegisterBusIO)
 <LI><a href="#[c8]">OTM8009A_WriteRegWrap</a> from otm8009a.o(i.OTM8009A_WriteRegWrap) referenced from otm8009a.o(i.OTM8009A_RegisterBusIO)
 <LI><a href="#[2c]">PVD_AVD_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[29]">PendSV_Handler</a> from stm32h7xx_it.o(i.PendSV_Handler) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[83]">QUADSPI_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[30]">RCC_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[77]">RNG_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[54]">RTC_Alarm_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[2e]">RTC_WKUP_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[c3]">ReadRegWrap</a> from ft6x06.o(i.ReadRegWrap) referenced from ft6x06.o(i.FT6X06_RegisterBusIO)
 <LI><a href="#[21]">Reset_Handler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[7e]">SAI1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[82]">SAI2_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[99]">SAI3_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[b9]">SAI4_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[5b]">SDMMC1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[a3]">SDMMC2_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[88]">SPDIF_RX_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[4e]">SPI1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[4f]">SPI2_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[5d]">SPI3_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[7b]">SPI4_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[7c]">SPI5_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[7d]">SPI6_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[27]">SVC_Handler</a> from stm32h7xx_it.o(i.SVC_Handler) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[9a]">SWPMI1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[2a]">SysTick_Handler</a> from stm32h7xx_it.o(i.SysTick_Handler) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[bc]">SystemInit</a> from system_stm32h7xx_dualcore_boot_cm4_cm7.o(i.SystemInit) referenced from startup_stm32h747xx_cm7.o(.text)
 <LI><a href="#[2d]">TAMP_STAMP_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[9b]">TIM15_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[9c]">TIM16_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[9d]">TIM17_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[43]">TIM1_BRK_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[46]">TIM1_CC_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[45]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[44]">TIM1_UP_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[47]">TIM2_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[48]">TIM3_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[49]">TIM4_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[5c]">TIM5_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[60]">TIM6_DAC_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[61]">TIM7_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[55]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[58]">TIM8_CC_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[57]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[56]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[20]">TS_EXTI_Callback</a> from stm32h747i_discovery_ts.o(i.TS_EXTI_Callback) referenced 2 times from stm32h747i_discovery_ts.o(.data)
 <LI><a href="#[5e]">UART4_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[5f]">UART5_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[79]">UART7_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[7a]">UART8_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[50]">USART1_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[51]">USART2_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[52]">USART3_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[6f]">USART6_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[26]">UsageFault_Handler</a> from stm32h7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[bb]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[2b]">WWDG_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[b6]">WWDG_RST_IRQHandler</a> from startup_stm32h747xx_cm7.o(.text) referenced from startup_stm32h747xx_cm7.o(RESET)
 <LI><a href="#[c4]">WriteRegWrap</a> from ft6x06.o(i.WriteRegWrap) referenced from ft6x06.o(i.FT6X06_RegisterBusIO)
 <LI><a href="#[d4]">__main</a> from __main.o(!!!main) referenced from startup_stm32h747xx_cm7.o(.text)
 <LI><a href="#[b]">forward_conv2d_if32of32wf32_nl_pool</a> from layers_conv2d_generic_float.o(i.forward_conv2d_if32of32wf32_nl_pool) referenced 4 times from network.o(.data)
 <LI><a href="#[9]">forward_dense</a> from layers_conv2d_generic_float.o(i.forward_dense) referenced 2 times from network.o(.data)
 <LI><a href="#[c]">forward_lite_nl_relu_if32of32</a> from lite_nl_generic_float.o(i.forward_lite_nl_relu_if32of32) referenced 4 times from network.o(.data)
 <LI><a href="#[a]">forward_transpose</a> from layers_generic_float.o(i.forward_transpose) referenced 2 times from network.o(.data)
 <LI><a href="#[d]">pool_func_mp_array_f32</a> from forward_lite_pool_f32.o(i.pool_func_mp_array_f32) referenced 4 times from network.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[d4]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d5]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d7]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1e8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1e9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ea]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1eb]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1ec]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[df]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[d8]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[da]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1f5]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1f8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1fa]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1fc]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1fe]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1ff]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[200]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[e4]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[201]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[202]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[203]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[204]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[205]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[206]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[207]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[208]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[d6]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[209]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[dc]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[de]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[20a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[e0]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[20b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[f3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e3]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[20c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[e5]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[21]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[20d]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[a6]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CM4_SEV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CM7_SEV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>HOLD_CORE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>HSEM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>WWDG_RST_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h747xx_cm7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h747xx_cm7.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e7]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_if32of32wf32_pool
</UL>

<P><STRONG><a name="[ea]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_if32of32wf32_pool
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[20e]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_check_custom_types
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_ai_buffer_array_copy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
</UL>

<P><STRONG><a name="[212]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[216]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ec]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[db]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[ee]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[219]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[ed]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[21a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[e2]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f0]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ef]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e6]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[f4]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[f5]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[f6]"></a>AI_Run</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.AI_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AI_Run &rArr; ai_network_run &rArr; ai_platform_network_process &rArr; _platform_network_io_bind &rArr; _platform_network_state_setup &rArr; get_tensor_byte_size
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_run
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>BSP_GetTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h747i_discovery_bus.o(i.BSP_GetTick))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.LCD_Init)
<LI> stm32h747i_discovery_ts.o(i.FT6X06_Probe)
</UL>
<P><STRONG><a name="[bf]"></a>BSP_I2C4_DeInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32h747i_discovery_bus.o(i.BSP_I2C4_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BSP_I2C4_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h747i_discovery_ts.o(i.FT6X06_Probe)
</UL>
<P><STRONG><a name="[be]"></a>BSP_I2C4_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32h747i_discovery_bus.o(i.BSP_I2C4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_I2C4_Init &rArr; I2C4_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetTiming
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_MspInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h747i_discovery_ts.o(i.FT6X06_Probe)
</UL>
<P><STRONG><a name="[c0]"></a>BSP_I2C4_ReadReg</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h747i_discovery_bus.o(i.BSP_I2C4_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BSP_I2C4_ReadReg &rArr; I2C4_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_ReadReg
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h747i_discovery_ts.o(i.FT6X06_Probe)
</UL>
<P><STRONG><a name="[c1]"></a>BSP_I2C4_WriteReg</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h747i_discovery_bus.o(i.BSP_I2C4_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BSP_I2C4_WriteReg &rArr; I2C4_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_WriteReg
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h747i_discovery_ts.o(i.FT6X06_Probe)
</UL>
<P><STRONG><a name="[177]"></a>BSP_JOY_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h747i_discovery.o(i.BSP_JOY_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JOY1_UP_EXTI_Callback
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JOY1_SEL_EXTI_Callback
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JOY1_RIGHT_EXTI_Callback
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JOY1_LEFT_EXTI_Callback
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JOY1_DOWN_EXTI_Callback
</UL>

<P><STRONG><a name="[c9]"></a>BSP_LCD_DrawBitmap</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, stm32h747i_discovery_lcd.o(i.BSP_LCD_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = BSP_LCD_DrawBitmap &rArr; LL_ConvertLineToRGB &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConvertLineToRGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>BSP_LCD_DrawHLine</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, stm32h747i_discovery_lcd.o(i.BSP_LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BSP_LCD_DrawHLine &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>BSP_LCD_DrawVLine</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, stm32h747i_discovery_lcd.o(i.BSP_LCD_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BSP_LCD_DrawVLine &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>BSP_LCD_FillRGBRect</STRONG> (Thumb, 90 bytes, Stack size 52 bytes, stm32h747i_discovery_lcd.o(i.BSP_LCD_FillRGBRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BSP_LCD_FillRGBRect &rArr; BSP_LCD_WritePixel
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_WritePixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>BSP_LCD_FillRect</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, stm32h747i_discovery_lcd.o(i.BSP_LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BSP_LCD_FillRect &rArr; LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>BSP_LCD_GetPixelFormat</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h747i_discovery_lcd.o(i.BSP_LCD_GetPixelFormat))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[1e5]"></a>BSP_LCD_GetXSize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h747i_discovery_lcd.o(i.BSP_LCD_GetXSize))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e6]"></a>BSP_LCD_GetYSize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h747i_discovery_lcd.o(i.BSP_LCD_GetYSize))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>BSP_LCD_ReadPixel</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32h747i_discovery_lcd.o(i.BSP_LCD_ReadPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LCD_ReadPixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>BSP_LCD_Reset</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, stm32h747i_discovery_lcd.o(i.BSP_LCD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_LCD_Reset &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[d2]"></a>BSP_LCD_SetActiveLayer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h747i_discovery_lcd.o(i.BSP_LCD_SetActiveLayer))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>BSP_LCD_WritePixel</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32h747i_discovery_lcd.o(i.BSP_LCD_WritePixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LCD_WritePixel
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRGBRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>BSP_LED_Init</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, stm32h747i_discovery.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>BSP_PB_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h747i_discovery.o(i.BSP_PB_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_WAKEUP_EXTI_Callback
</UL>

<P><STRONG><a name="[10b]"></a>BSP_SDRAM_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32h747i_discovery_sdram.o(i.BSP_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BSP_SDRAM_Init &rArr; MX_SDRAM_Init &rArr; HAL_SDRAM_Init &rArr; FMC_SDRAM_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>BSP_TS_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h747i_discovery_ts.o(i.BSP_TS_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TS_EXTI_Callback
</UL>

<P><STRONG><a name="[1e7]"></a>BSP_TS_GetState</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, stm32h747i_discovery_ts.o(i.BSP_TS_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_TS_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>BSP_TS_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32h747i_discovery_ts.o(i.BSP_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_TS_Init &rArr; FT6X06_Probe &rArr; FT6X06_ReadID &rArr; ft6x06_chip_id &rArr; ft6x06_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_Probe
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>DSI_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.DSI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSI_IRQHandler &rArr; HAL_DSI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[16d]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[15e]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[161]"></a>FMC_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_ProgramRefreshRate))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>

<P><STRONG><a name="[163]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[15f]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 164 bytes, Stack size 36 bytes, stm32h7xx_ll_fmc.o(i.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[18]"></a>FT6X06_ClearIT</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ft6x06.o(i.FT6X06_ClearIT))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>FT6X06_DeInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ft6x06.o(i.FT6X06_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>FT6X06_DisableIT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ft6x06.o(i.FT6X06_DisableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT6X06_DisableIT &rArr; ft6x06_g_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_g_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>FT6X06_EnableIT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ft6x06.o(i.FT6X06_EnableIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT6X06_EnableIT &rArr; ft6x06_g_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_g_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>FT6X06_GestureConfig</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ft6x06.o(i.FT6X06_GestureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FT6X06_GestureConfig &rArr; ft6x06_radian_value
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_radian_value
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_offset_up_down
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_offset_left_right
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_distance_zoom
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_distance_up_down
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_disatnce_left_right
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>FT6X06_GetCapabilities</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, ft6x06.o(i.FT6X06_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FT6X06_GetCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_Probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>FT6X06_GetGesture</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ft6x06.o(i.FT6X06_GetGesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT6X06_GetGesture &rArr; ft6x06_gest_id
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_gest_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>FT6X06_GetMultiTouchState</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ft6x06.o(i.FT6X06_GetMultiTouchState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FT6X06_GetMultiTouchState &rArr; FT6X06_DetectTouch &rArr; ft6x06_td_status &rArr; ft6x06_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_DetectTouch
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_read_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>FT6X06_GetState</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ft6x06.o(i.FT6X06_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FT6X06_GetState &rArr; FT6X06_DetectTouch &rArr; ft6x06_td_status &rArr; ft6x06_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_DetectTouch
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_read_reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>FT6X06_ITStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ft6x06.o(i.FT6X06_ITStatus))
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>FT6X06_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ft6x06.o(i.FT6X06_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FT6X06_Init &rArr; FT6X06_DisableIT &rArr; ft6x06_g_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_DisableIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>FT6X06_ReadID</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ft6x06.o(i.FT6X06_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FT6X06_ReadID &rArr; ft6x06_chip_id &rArr; ft6x06_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_chip_id
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_Probe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(.data)
</UL>
<P><STRONG><a name="[124]"></a>FT6X06_RegisterBusIO</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ft6x06.o(i.FT6X06_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FT6X06_RegisterBusIO
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_Probe
</UL>

<P><STRONG><a name="[128]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, stm32h7xx_hal_crc_ex.o(i.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[126]"></a>HAL_CRC_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32h7xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[127]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, crc.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[18a]"></a>HAL_DMA2D_ConfigLayer</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, stm32h7xx_hal_dma2d.o(i.HAL_DMA2D_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConvertLineToRGB
</UL>

<P><STRONG><a name="[129]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, stm32h7xx_hal_dma2d.o(i.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA2D_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConvertLineToRGB
</UL>

<P><STRONG><a name="[12a]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dma2d.o(i.HAL_DMA2D_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[12b]"></a>HAL_DMA2D_PollForTransfer</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, stm32h7xx_hal_dma2d.o(i.HAL_DMA2D_PollForTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA2D_PollForTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConvertLineToRGB
</UL>

<P><STRONG><a name="[12c]"></a>HAL_DMA2D_Start</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stm32h7xx_hal_dma2d.o(i.HAL_DMA2D_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2D_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FillBuffer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ConvertLineToRGB
</UL>

<P><STRONG><a name="[180]"></a>HAL_DSI_ConfigAdaptedCommandMode</STRONG> (Thumb, 272 bytes, Stack size 20 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_ConfigAdaptedCommandMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DSI_ConfigAdaptedCommandMode
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[181]"></a>HAL_DSI_ConfigCommand</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_ConfigCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DSI_ConfigCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[187]"></a>HAL_DSI_ConfigFlowControl</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_ConfigFlowControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DSI_ConfigFlowControl
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[184]"></a>HAL_DSI_ConfigPhyTimer</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_ConfigPhyTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DSI_ConfigPhyTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[12e]"></a>HAL_DSI_DeInit</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DSI_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[131]"></a>HAL_DSI_EndOfRefreshCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.HAL_DSI_EndOfRefreshCallback))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>HAL_DSI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_IRQHandler
</UL>

<P><STRONG><a name="[188]"></a>HAL_DSI_ForceRXLowPower</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_ForceRXLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DSI_ForceRXLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[115]"></a>HAL_DSI_IRQHandler</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DSI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_EndOfRefreshCallback
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_TearingEffectCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>HAL_DSI_Init</STRONG> (Thumb, 510 bytes, Stack size 32 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_DSI_Init &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[114]"></a>HAL_DSI_LongWrite</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_LongWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_ConfigPacketHeader
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IO_Write
</UL>

<P><STRONG><a name="[12f]"></a>HAL_DSI_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_DeInit
</UL>

<P><STRONG><a name="[134]"></a>HAL_DSI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
</UL>

<P><STRONG><a name="[112]"></a>HAL_DSI_Read</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_DSI_Read &rArr; DSI_ShortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_ShortWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_ConfigPacketHeader
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IO_Read
</UL>

<P><STRONG><a name="[1e4]"></a>HAL_DSI_Refresh</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>HAL_DSI_ShortWrite</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_ShortWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_DSI_ShortWrite &rArr; DSI_ShortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_ShortWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_IO_Write
</UL>

<P><STRONG><a name="[183]"></a>HAL_DSI_Start</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DSI_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[130]"></a>HAL_DSI_TearingEffectCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_dsi.o(i.HAL_DSI_TearingEffectCallback))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32h7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Reset
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 324 bytes, Stack size 36 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_DeInit
</UL>

<P><STRONG><a name="[107]"></a>HAL_GPIO_Init</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_MspInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Reset
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_MspInit
</UL>

<P><STRONG><a name="[108]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Reset
</UL>

<P><STRONG><a name="[15b]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[f9]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSI_ShortWrite
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_PollForTransfer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DeInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Read
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_HSEM_FastTake</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_hsem.o(i.HAL_HSEM_FastTake))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_HSEM_Release</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_hsem.o(i.HAL_HSEM_Release))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[191]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32h7xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
</UL>

<P><STRONG><a name="[192]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32h7xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
</UL>

<P><STRONG><a name="[fb]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32h7xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_DeInit
</UL>

<P><STRONG><a name="[102]"></a>HAL_I2C_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(i.HAL_I2C_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_WriteReg
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_ReadReg
</UL>

<P><STRONG><a name="[fc]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_Init
</UL>

<P><STRONG><a name="[137]"></a>HAL_I2C_Init</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
</UL>

<P><STRONG><a name="[139]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, stm32h7xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_ReadReg
</UL>

<P><STRONG><a name="[13e]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, stm32h7xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C4_WriteReg
</UL>

<P><STRONG><a name="[136]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[138]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[198]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[141]"></a>HAL_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32h7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>HAL_InitTick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32h7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[148]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>HAL_LTDC_DeInit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_LTDC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[14d]"></a>HAL_LTDC_Init</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_LTDC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
</UL>

<P><STRONG><a name="[14c]"></a>HAL_LTDC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DeInit
</UL>

<P><STRONG><a name="[14e]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_ltdc.o(i.HAL_LTDC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[197]"></a>HAL_MDMA_DeInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32h7xx_hal_mdma.o(i.HAL_MDMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MDMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_MspInit
</UL>

<P><STRONG><a name="[14f]"></a>HAL_MDMA_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32h7xx_hal_mdma.o(i.HAL_MDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_MDMA_Init &rArr; MDMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_MspInit
</UL>

<P><STRONG><a name="[18d]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[18c]"></a>HAL_MPU_Disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[18e]"></a>HAL_MPU_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[145]"></a>HAL_MspInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[189]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MspInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_MspInit
</UL>

<P><STRONG><a name="[147]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MspInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_MspInit
</UL>

<P><STRONG><a name="[142]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[152]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32h7xx_hal_pwr_ex.o(i.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[153]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[19c]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 296 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[19d]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 296 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[155]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2524 bytes, Stack size 48 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[158]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[154]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[159]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[fe]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[143]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[15a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1410 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[15c]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_SDRAM_Init &rArr; FMC_SDRAM_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDRAM_Init
</UL>

<P><STRONG><a name="[15d]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[160]"></a>HAL_SDRAM_ProgramRefreshRate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_ProgramRefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_RefreshRate
</UL>

<P><STRONG><a name="[162]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32h7xx_hal_sdram.o(i.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_RefreshMode
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_Precharge
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_ModeRegConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_ClockEnable
</UL>

<P><STRONG><a name="[146]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[194]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[164]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[166]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[167]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[168]"></a>HAL_UART_MspInit</STRONG> (Thumb, 122 bytes, Stack size 232 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[23]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[172]"></a>IS42S32800J_ClockEnable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, is42s32800j.o(i.IS42S32800J_ClockEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IS42S32800J_ClockEnable &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_Init
</UL>

<P><STRONG><a name="[10e]"></a>IS42S32800J_Init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, is42s32800j.o(i.IS42S32800J_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IS42S32800J_Init &rArr; IS42S32800J_ModeRegConfig &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_RefreshRate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_RefreshMode
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_Precharge
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_ModeRegConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_ClockEnable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[175]"></a>IS42S32800J_ModeRegConfig</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, is42s32800j.o(i.IS42S32800J_ModeRegConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IS42S32800J_ModeRegConfig &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_Init
</UL>

<P><STRONG><a name="[173]"></a>IS42S32800J_Precharge</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, is42s32800j.o(i.IS42S32800J_Precharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IS42S32800J_Precharge &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_Init
</UL>

<P><STRONG><a name="[174]"></a>IS42S32800J_RefreshMode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, is42s32800j.o(i.IS42S32800J_RefreshMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IS42S32800J_RefreshMode &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_Init
</UL>

<P><STRONG><a name="[176]"></a>IS42S32800J_RefreshRate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, is42s32800j.o(i.IS42S32800J_RefreshRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IS42S32800J_RefreshRate &rArr; HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_ProgramRefreshRate
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS42S32800J_Init
</UL>

<P><STRONG><a name="[d0]"></a>LCD_GetXSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.LCD_GetXSize))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>LCD_GetYSize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.LCD_GetYSize))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>LCD_MspInit</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, main.o(i.LCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[182]"></a>LTDC_Init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, main.o(i.LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LTDC_Init &rArr; HAL_LTDC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[18f]"></a>MX_CRC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, crc.o(i.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>MX_GPIO_Init</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>MX_I2C4_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32h747i_discovery_bus.o(i.MX_I2C4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_I2C4_Init &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_Init
</UL>

<P><STRONG><a name="[10d]"></a>MX_SDRAM_Init</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, stm32h747i_discovery_sdram.o(i.MX_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_SDRAM_Init &rArr; HAL_SDRAM_Init &rArr; FMC_SDRAM_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[193]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[186]"></a>OTM8009A_Init</STRONG> (Thumb, 1684 bytes, Stack size 56 bytes, otm8009a.o(i.OTM8009A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OTM8009A_Init &rArr; OTM8009A_IO_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otm8009a_write_reg
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[185]"></a>OTM8009A_RegisterBusIO</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, otm8009a.o(i.OTM8009A_RegisterBusIO))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[29]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[199]"></a>SystemClock_Config</STRONG> (Thumb, 154 bytes, Stack size 128 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>SystemInit</STRONG> (Thumb, 208 bytes, Stack size 20 bytes, system_stm32h7xx_dualcore_boot_cm4_cm7.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(.text)
</UL>
<P><STRONG><a name="[169]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[16b]"></a>UART_CheckIdleState</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[16a]"></a>UART_SetConfig</STRONG> (Thumb, 876 bytes, Stack size 56 bytes, stm32h7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[19b]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[1a0]"></a>UTIL_LCD_DisplayChar</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32_lcd.o(i.UTIL_LCD_DisplayChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UTIL_LCD_DisplayChar &rArr; DrawChar &rArr; UTIL_LCD_FillRGBRect
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_DisplayStringAt
</UL>

<P><STRONG><a name="[1a1]"></a>UTIL_LCD_DisplayStringAt</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32_lcd.o(i.UTIL_LCD_DisplayStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = UTIL_LCD_DisplayStringAt &rArr; UTIL_LCD_DisplayChar &rArr; DrawChar &rArr; UTIL_LCD_FillRGBRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_DisplayStringAtLine
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>UTIL_LCD_DisplayStringAtLine</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32_lcd.o(i.UTIL_LCD_DisplayStringAtLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = UTIL_LCD_DisplayStringAtLine &rArr; UTIL_LCD_DisplayStringAt &rArr; UTIL_LCD_DisplayChar &rArr; DrawChar &rArr; UTIL_LCD_FillRGBRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_DisplayStringAt
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_GetFont
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BriefDisplay
</UL>

<P><STRONG><a name="[1a3]"></a>UTIL_LCD_DrawCircle</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, stm32_lcd.o(i.UTIL_LCD_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UTIL_LCD_DrawCircle &rArr; UTIL_LCD_SetPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_SetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_FillCircle
</UL>

<P><STRONG><a name="[1a6]"></a>UTIL_LCD_DrawHLine</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, stm32_lcd.o(i.UTIL_LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UTIL_LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_FillCircle
</UL>

<P><STRONG><a name="[1a5]"></a>UTIL_LCD_FillCircle</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, stm32_lcd.o(i.UTIL_LCD_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UTIL_LCD_FillCircle &rArr; UTIL_LCD_DrawCircle &rArr; UTIL_LCD_SetPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_DrawHLine
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_DrawCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>UTIL_LCD_FillRGBRect</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, stm32_lcd.o(i.UTIL_LCD_FillRGBRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UTIL_LCD_FillRGBRect
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawChar
</UL>

<P><STRONG><a name="[17a]"></a>UTIL_LCD_FillRect</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, stm32_lcd.o(i.UTIL_LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UTIL_LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BriefDisplay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a2]"></a>UTIL_LCD_GetFont</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_lcd.o(i.UTIL_LCD_GetFont))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_DisplayStringAtLine
</UL>

<P><STRONG><a name="[17c]"></a>UTIL_LCD_SetBackColor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_lcd.o(i.UTIL_LCD_SetBackColor))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BriefDisplay
</UL>

<P><STRONG><a name="[179]"></a>UTIL_LCD_SetFont</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_lcd.o(i.UTIL_LCD_SetFont))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BriefDisplay
</UL>

<P><STRONG><a name="[1e3]"></a>UTIL_LCD_SetFuncDriver</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32_lcd.o(i.UTIL_LCD_SetFuncDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_LCD_SetFuncDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a4]"></a>UTIL_LCD_SetPixel</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32_lcd.o(i.UTIL_LCD_SetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_LCD_SetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_DrawCircle
</UL>

<P><STRONG><a name="[17b]"></a>UTIL_LCD_SetTextColor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_lcd.o(i.UTIL_LCD_SetTextColor))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BriefDisplay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h747xx_cm7.o(RESET)
</UL>
<P><STRONG><a name="[1b6]"></a>aiInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(i.aiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = aiInit &rArr; ai_network_create_and_init &rArr; ai_network_init &rArr; ai_platform_network_init &rArr; _platform_ai_buffer_array_copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_outputs_get
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_inputs_get
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_create_and_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d8]"></a>ai_array_get_byte_size</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ai_datatypes_format.o(i.ai_array_get_byte_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_array_get_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_stride
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_byte_size
</UL>

<P><STRONG><a name="[1ae]"></a>ai_array_get_data_byte_size</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ai_datatypes_format.o(i.ai_array_get_data_byte_size))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[1a8]"></a>ai_array_to_buffer_fmt</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, ai_datatypes_format.o(i.ai_array_to_buffer_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_array_to_buffer_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
</UL>

<P><STRONG><a name="[1ba]"></a>ai_buffer_array_item_set_address</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ai_platform.o(i.ai_buffer_array_item_set_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_buffer_array_item_set_address
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_sane
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_create_and_init
</UL>

<P><STRONG><a name="[1ab]"></a>ai_buffer_array_sane</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ai_platform.o(i.ai_buffer_array_sane))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_item_set_address
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer_array
</UL>

<P><STRONG><a name="[1ad]"></a>ai_buffer_get_size</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ai_platform.o(i.ai_buffer_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_buffer_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[1bb]"></a>ai_check_custom_types</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, layers.o(i.ai_check_custom_types))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[1de]"></a>ai_conv2d_kernel_simple_opt_f32</STRONG> (Thumb, 366 bytes, Stack size 68 bytes, forward_lite_conv2d_if32of32wf32.o(i.ai_conv2d_kernel_simple_opt_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ai_conv2d_kernel_simple_opt_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_if32of32wf32_pool
</UL>

<P><STRONG><a name="[1bd]"></a>ai_layers_forward_all</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, layers.o(i.ai_layers_forward_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_layers_forward_all &rArr; _ai_forward_layer
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_forward_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[1d4]"></a>ai_layers_init_all</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, layers.o(i.ai_layers_init_all))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[1d5]"></a>ai_layers_post_init_all</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, layers.o(i.ai_layers_post_init_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_layers_post_init_all
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
</UL>

<P><STRONG><a name="[1bf]"></a>ai_network_create</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, network.o(i.ai_network_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ai_network_create &rArr; ai_platform_network_create &rArr; ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_create_and_init
</UL>

<P><STRONG><a name="[1b7]"></a>ai_network_create_and_init</STRONG> (Thumb, 136 bytes, Stack size 88 bytes, network.o(i.ai_network_create_and_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ai_network_create_and_init &rArr; ai_network_init &rArr; ai_platform_network_init &rArr; _platform_ai_buffer_array_copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_data_params_get
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_item_set_address
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_error
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInit
</UL>

<P><STRONG><a name="[1c1]"></a>ai_network_data_params_get</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, network_data.o(i.ai_network_data_params_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_network_data_params_get &rArr; ai_platform_bind_network_params
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_bind_network_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_create_and_init
</UL>

<P><STRONG><a name="[f8]"></a>ai_network_get_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, network.o(i.ai_network_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_network_get_error &rArr; ai_platform_network_get_error
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_create_and_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Run
</UL>

<P><STRONG><a name="[1c2]"></a>ai_network_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, network.o(i.ai_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ai_network_init &rArr; ai_platform_network_init &rArr; _platform_ai_buffer_array_copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_configure_weights
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_configure_activations
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_create_and_init
</UL>

<P><STRONG><a name="[1b8]"></a>ai_network_inputs_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, network.o(i.ai_network_inputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ai_network_inputs_get &rArr; ai_platform_inputs_get &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInit
</UL>

<P><STRONG><a name="[1b9]"></a>ai_network_outputs_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, network.o(i.ai_network_outputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ai_network_outputs_get &rArr; ai_platform_outputs_get &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInit
</UL>

<P><STRONG><a name="[f7]"></a>ai_network_run</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, network.o(i.ai_network_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ai_network_run &rArr; ai_platform_network_process &rArr; _platform_network_io_bind &rArr; _platform_network_state_setup &rArr; get_tensor_byte_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Run
</UL>

<P><STRONG><a name="[1c3]"></a>ai_platform_bind_network_params</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_bind_network_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_platform_bind_network_params
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_data_params_get
</UL>

<P><STRONG><a name="[1cf]"></a>ai_platform_context_acquire</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ai_platform_interface.o(i.ai_platform_context_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
</UL>

<P><STRONG><a name="[1cc]"></a>ai_platform_get_activations_map</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_get_activations_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_platform_get_activations_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer_array
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_configure_activations
</UL>

<P><STRONG><a name="[1ce]"></a>ai_platform_get_weights_map</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_get_weights_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_platform_get_weights_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer_array
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_get_table_map_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_configure_weights
</UL>

<P><STRONG><a name="[1c9]"></a>ai_platform_inputs_get</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ai_platform_interface.o(i.ai_platform_inputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ai_platform_inputs_get &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_inputs_get
</UL>

<P><STRONG><a name="[1c0]"></a>ai_platform_network_create</STRONG> (Thumb, 146 bytes, Stack size 72 bytes, ai_platform_interface.o(i.ai_platform_network_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ai_platform_network_create &rArr; ai_check_custom_types &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_version_get
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_check_custom_types
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_create
</UL>

<P><STRONG><a name="[1c4]"></a>ai_platform_network_get_error</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ai_platform_interface.o(i.ai_platform_network_get_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ai_platform_network_get_error
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_get_error
</UL>

<P><STRONG><a name="[1c5]"></a>ai_platform_network_init</STRONG> (Thumb, 264 bytes, Stack size 104 bytes, ai_platform_interface.o(i.ai_platform_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ai_platform_network_init &rArr; _platform_ai_buffer_array_copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_init_all
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_buffers_signature_valid
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_ai_buffer_array_copy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_size
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
</UL>

<P><STRONG><a name="[1c8]"></a>ai_platform_network_post_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ai_platform_interface.o(i.ai_platform_network_post_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_platform_network_post_init &rArr; ai_layers_post_init_all
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_post_init_all
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
</UL>

<P><STRONG><a name="[1cb]"></a>ai_platform_network_process</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ai_platform_interface.o(i.ai_platform_network_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ai_platform_network_process &rArr; _platform_network_io_bind &rArr; _platform_network_state_setup &rArr; get_tensor_byte_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_forward_all
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_output
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_input
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_run
</UL>

<P><STRONG><a name="[1b1]"></a>ai_platform_network_set_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ai_platform_interface.o(i.ai_platform_network_set_error))
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_configure_weights
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_configure_activations
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[1ca]"></a>ai_platform_outputs_get</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ai_platform_interface.o(i.ai_platform_outputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ai_platform_outputs_get &rArr; _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_context_acquire
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_platform_get_io_buffers_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_outputs_get
</UL>

<P><STRONG><a name="[1d1]"></a>ai_version_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ai_datatypes_internal.o(i.ai_version_get))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[1d2]"></a>core_get_error</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, core_common.o(i.core_get_error))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
</UL>

<P><STRONG><a name="[1d0]"></a>core_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_common.o(i.core_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[1d6]"></a>core_set_error</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, core_common.o(i.core_set_error))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
</UL>

<P><STRONG><a name="[b]"></a>forward_conv2d_if32of32wf32_nl_pool</STRONG> (Thumb, 672 bytes, Stack size 200 bytes, layers_conv2d_generic_float.o(i.forward_conv2d_if32of32wf32_nl_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = forward_conv2d_if32of32wf32_nl_pool &rArr; forward_lite_conv2d_if32of32wf32_pool &rArr; ai_conv2d_kernel_simple_opt_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_if32of32wf32_pool
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_stride
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_ptr
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_nl_get_params_byte_size
</UL>
<BR>[Address Reference Count : 2]<UL><LI> network.o(.data)
<LI> network.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>forward_dense</STRONG> (Thumb, 516 bytes, Stack size 136 bytes, layers_conv2d_generic_float.o(i.forward_dense))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = forward_dense &rArr; forward_lite_dense_if32of32wf32
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dense_if32of32wf32
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ai_dict4_dot_array_f32
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data)
</UL>
<P><STRONG><a name="[1db]"></a>forward_lite_conv2d_if32of32wf32_pool</STRONG> (Thumb, 684 bytes, Stack size 176 bytes, forward_lite_conv2d_if32of32wf32.o(i.forward_lite_conv2d_if32of32wf32_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = forward_lite_conv2d_if32of32wf32_pool &rArr; ai_conv2d_kernel_simple_opt_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_conv2d_kernel_simple_opt_f32
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_final_pooling_buffer_reorder
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_if32of32wf32_nl_pool
</UL>

<P><STRONG><a name="[1dd]"></a>forward_lite_dense_if32of32wf32</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lite_dense_if32.o(i.forward_lite_dense_if32of32wf32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = forward_lite_dense_if32of32wf32
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ai_math_dot_array
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
</UL>

<P><STRONG><a name="[c]"></a>forward_lite_nl_relu_if32of32</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lite_nl_generic_float.o(i.forward_lite_nl_relu_if32of32))
<BR>[Address Reference Count : 2]<UL><LI> network.o(.data)
<LI> network.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>forward_transpose</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, layers_generic_float.o(i.forward_transpose))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = forward_transpose &rArr; _transpose_items &rArr; st_int8_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_transpose_items
</UL>
<BR>[Address Reference Count : 1]<UL><LI> network.o(.data)
</UL>
<P><STRONG><a name="[125]"></a>ft6x06_chip_id</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ft6x06_reg.o(i.ft6x06_chip_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ft6x06_chip_id &rArr; ft6x06_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_ReadID
</UL>

<P><STRONG><a name="[11f]"></a>ft6x06_disatnce_left_right</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ft6x06_reg.o(i.ft6x06_disatnce_left_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft6x06_disatnce_left_right
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_GestureConfig
</UL>

<P><STRONG><a name="[120]"></a>ft6x06_distance_up_down</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ft6x06_reg.o(i.ft6x06_distance_up_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft6x06_distance_up_down
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_GestureConfig
</UL>

<P><STRONG><a name="[121]"></a>ft6x06_distance_zoom</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ft6x06_reg.o(i.ft6x06_distance_zoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft6x06_distance_zoom
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_GestureConfig
</UL>

<P><STRONG><a name="[11b]"></a>ft6x06_g_mode</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ft6x06_reg.o(i.ft6x06_g_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft6x06_g_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_EnableIT
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_DisableIT
</UL>

<P><STRONG><a name="[122]"></a>ft6x06_gest_id</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ft6x06_reg.o(i.ft6x06_gest_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ft6x06_gest_id
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_GetGesture
</UL>

<P><STRONG><a name="[11d]"></a>ft6x06_offset_left_right</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ft6x06_reg.o(i.ft6x06_offset_left_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft6x06_offset_left_right
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_GestureConfig
</UL>

<P><STRONG><a name="[11e]"></a>ft6x06_offset_up_down</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ft6x06_reg.o(i.ft6x06_offset_up_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft6x06_offset_up_down
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_GestureConfig
</UL>

<P><STRONG><a name="[11c]"></a>ft6x06_radian_value</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ft6x06_reg.o(i.ft6x06_radian_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ft6x06_radian_value
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_GestureConfig
</UL>

<P><STRONG><a name="[123]"></a>ft6x06_read_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ft6x06_reg.o(i.ft6x06_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ft6x06_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_td_status
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_chip_id
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_GetState
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_GetMultiTouchState
</UL>

<P><STRONG><a name="[11a]"></a>ft6x06_td_status</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ft6x06_reg.o(i.ft6x06_td_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ft6x06_td_status &rArr; ft6x06_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_DetectTouch
</UL>

<P><STRONG><a name="[1af]"></a>get_tensor_byte_size</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ai_datatypes_internal.o(i.get_tensor_byte_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_tensor_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_setup
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[e1]"></a>main</STRONG> (Thumb, 1240 bytes, Stack size 72 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = main &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BriefDisplay
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_SetTextColor
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_SetFuncDriver
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_FillRect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_FillCircle
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_DisplayStringAt
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_Release
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HSEM_FastTake
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Refresh
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_GetState
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetYSize
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_GetXSize
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AI_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[195]"></a>otm8009a_write_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, otm8009a_reg.o(i.otm8009a_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = otm8009a_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_Init
</UL>

<P><STRONG><a name="[d]"></a>pool_func_mp_array_f32</STRONG> (Thumb, 420 bytes, Stack size 64 bytes, forward_lite_pool_f32.o(i.pool_func_mp_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pool_func_mp_array_f32
</UL>
<BR>[Address Reference Count : 2]<UL><LI> network.o(.data)
<LI> network.o(.data)
</UL>
<P><STRONG><a name="[1b3]"></a>st_int8_copy</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, st_int8_fill.o(i.st_int8_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = st_int8_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_transpose_items
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_output
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_update_input
</UL>

<P><STRONG><a name="[d9]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[21d]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[21e]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1c7]"></a>network_configure_activations</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, network.o(i.network_configure_activations))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = network_configure_activations &rArr; ai_platform_get_activations_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_activations_map
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
</UL>

<P><STRONG><a name="[1c6]"></a>network_configure_weights</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, network.o(i.network_configure_weights))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = network_configure_weights &rArr; ai_platform_get_weights_map &rArr; _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_weights_map
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_network_init
</UL>

<P><STRONG><a name="[c6]"></a>DSI_IO_Read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, main.o(i.DSI_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DSI_IO_Read &rArr; HAL_DSI_Read &rArr; DSI_ShortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.LCD_Init)
</UL>
<P><STRONG><a name="[c5]"></a>DSI_IO_Write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, main.o(i.DSI_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DSI_IO_Write &rArr; HAL_DSI_LongWrite &rArr; DSI_ConfigPacketHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.LCD_Init)
</UL>
<P><STRONG><a name="[178]"></a>LCD_BriefDisplay</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, main.o(i.LCD_BriefDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LCD_BriefDisplay &rArr; UTIL_LCD_DisplayStringAtLine &rArr; UTIL_LCD_DisplayStringAt &rArr; UTIL_LCD_DisplayChar &rArr; DrawChar &rArr; UTIL_LCD_FillRGBRect
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_SetTextColor
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_SetFont
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_SetBackColor
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_FillRect
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_DisplayStringAtLine
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>LCD_Init</STRONG> (Thumb, 328 bytes, Stack size 64 bytes, main.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_RegisterBusIO
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Start
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ForceRXLowPower
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_DeInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigPhyTimer
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigFlowControl
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigCommand
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ConfigAdaptedCommandMode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Reset
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>MPU_Config</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, main.o(i.MPU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MPU_Config &rArr; HAL_MPU_ConfigRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>DMA2D_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32h7xx_hal_dma2d.o(i.DMA2D_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA2D_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start
</UL>

<P><STRONG><a name="[135]"></a>DSI_ConfigPacketHeader</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32h7xx_hal_dsi.o(i.DSI_ConfigPacketHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSI_ConfigPacketHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Read
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_LongWrite
</UL>

<P><STRONG><a name="[116]"></a>DSI_ShortWrite</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, stm32h7xx_hal_dsi.o(i.DSI_ShortWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DSI_ShortWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_ShortWrite
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DSI_Read
</UL>

<P><STRONG><a name="[14a]"></a>LTDC_SetConfig</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, stm32h7xx_hal_ltdc.o(i.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[151]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[156]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[157]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[150]"></a>MDMA_Init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32h7xx_hal_mdma.o(i.MDMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MDMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Init
</UL>

<P><STRONG><a name="[171]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>

<P><STRONG><a name="[170]"></a>I2C_IsErrorOccurred</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, stm32h7xx_hal_i2c.o(i.I2C_IsErrorOccurred))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[13b]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32h7xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[13f]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32h7xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[13c]"></a>I2C_TransferConfig</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[13a]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32h7xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[13d]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[140]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32h7xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[19f]"></a>UART_EndRxTransfer</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[165]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32h7xx_hal_uart_ex.o(i.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[196]"></a>OTM8009A_IO_Delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, otm8009a.o(i.OTM8009A_IO_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OTM8009A_IO_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTM8009A_Init
</UL>

<P><STRONG><a name="[c7]"></a>OTM8009A_ReadRegWrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, otm8009a.o(i.OTM8009A_ReadRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OTM8009A_ReadRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otm8009a.o(i.OTM8009A_RegisterBusIO)
</UL>
<P><STRONG><a name="[c8]"></a>OTM8009A_WriteRegWrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, otm8009a.o(i.OTM8009A_WriteRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OTM8009A_WriteRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> otm8009a.o(i.OTM8009A_RegisterBusIO)
</UL>
<P><STRONG><a name="[119]"></a>FT6X06_DetectTouch</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ft6x06.o(i.FT6X06_DetectTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FT6X06_DetectTouch &rArr; ft6x06_td_status &rArr; ft6x06_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ft6x06_td_status
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_GetState
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_GetMultiTouchState
</UL>

<P><STRONG><a name="[c3]"></a>ReadRegWrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ft6x06.o(i.ReadRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(i.FT6X06_RegisterBusIO)
</UL>
<P><STRONG><a name="[c4]"></a>WriteRegWrap</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ft6x06.o(i.WriteRegWrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteRegWrap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ft6x06.o(i.FT6X06_RegisterBusIO)
</UL>
<P><STRONG><a name="[1a]"></a>BUTTON_WAKEUP_EXTI_Callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h747i_discovery.o(i.BUTTON_WAKEUP_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUTTON_WAKEUP_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h747i_discovery.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>JOY1_DOWN_EXTI_Callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32h747i_discovery.o(i.JOY1_DOWN_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JOY1_DOWN_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h747i_discovery.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>JOY1_LEFT_EXTI_Callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32h747i_discovery.o(i.JOY1_LEFT_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JOY1_LEFT_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h747i_discovery.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>JOY1_RIGHT_EXTI_Callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32h747i_discovery.o(i.JOY1_RIGHT_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JOY1_RIGHT_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h747i_discovery.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>JOY1_SEL_EXTI_Callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32h747i_discovery.o(i.JOY1_SEL_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JOY1_SEL_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h747i_discovery.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>JOY1_UP_EXTI_Callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32h747i_discovery.o(i.JOY1_UP_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JOY1_UP_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_JOY_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h747i_discovery.o(.data)
</UL>
<P><STRONG><a name="[fd]"></a>I2C4_MspInit</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, stm32h747i_discovery_bus.o(i.I2C4_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C4_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_Init
</UL>

<P><STRONG><a name="[101]"></a>I2C4_ReadReg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, stm32h747i_discovery_bus.o(i.I2C4_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = I2C4_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_ReadReg
</UL>

<P><STRONG><a name="[103]"></a>I2C4_WriteReg</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, stm32h747i_discovery_bus.o(i.I2C4_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = I2C4_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_WriteReg
</UL>

<P><STRONG><a name="[16e]"></a>I2C_Compute_PRESC_SCLDEL_SDADEL</STRONG> (Thumb, 184 bytes, Stack size 36 bytes, stm32h747i_discovery_bus.o(i.I2C_Compute_PRESC_SCLDEL_SDADEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_Compute_PRESC_SCLDEL_SDADEL
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetTiming
</UL>

<P><STRONG><a name="[16f]"></a>I2C_Compute_SCLL_SCLH</STRONG> (Thumb, 260 bytes, Stack size 68 bytes, stm32h747i_discovery_bus.o(i.I2C_Compute_SCLL_SCLH))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Compute_SCLL_SCLH
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetTiming
</UL>

<P><STRONG><a name="[ff]"></a>I2C_GetTiming</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32h747i_discovery_bus.o(i.I2C_GetTiming))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_GetTiming &rArr; I2C_Compute_SCLL_SCLH
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Compute_SCLL_SCLH
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Compute_PRESC_SCLDEL_SDADEL
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C4_Init
</UL>

<P><STRONG><a name="[104]"></a>LL_ConvertLineToRGB</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, stm32h747i_discovery_lcd.o(i.LL_ConvertLineToRGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LL_ConvertLineToRGB &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_PollForTransfer
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawBitmap
</UL>

<P><STRONG><a name="[105]"></a>LL_FillBuffer</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32h747i_discovery_lcd.o(i.LL_FillBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LL_FillBuffer &rArr; HAL_DMA2D_Start &rArr; DMA2D_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Start
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_PollForTransfer
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_FillRect
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawVLine
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_DrawHLine
</UL>

<P><STRONG><a name="[10c]"></a>SDRAM_MspInit</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, stm32h747i_discovery_sdram.o(i.SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MDMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SDRAM_Init
</UL>

<P><STRONG><a name="[110]"></a>FT6X06_Probe</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, stm32h747i_discovery_ts.o(i.FT6X06_Probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FT6X06_Probe &rArr; FT6X06_ReadID &rArr; ft6x06_chip_id &rArr; ft6x06_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_RegisterBusIO
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_ReadID
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FT6X06_GetCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Init
</UL>

<P><STRONG><a name="[20]"></a>TS_EXTI_Callback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32h747i_discovery_ts.o(i.TS_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TS_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TS_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h747i_discovery_ts.o(.data)
</UL>
<P><STRONG><a name="[117]"></a>DrawChar</STRONG> (Thumb, 262 bytes, Stack size 200 bytes, stm32_lcd.o(i.DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = DrawChar &rArr; UTIL_LCD_FillRGBRect
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_FillRGBRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LCD_DisplayChar
</UL>

<P><STRONG><a name="[1a7]"></a>_ai_platform_get_io_buffers_info</STRONG> (Thumb, 220 bytes, Stack size 136 bytes, ai_platform_interface.o(i._ai_platform_get_io_buffers_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _ai_platform_get_io_buffers_info &rArr; ai_array_to_buffer_fmt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_to_buffer_fmt
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
</UL>

<P><STRONG><a name="[1a9]"></a>_platform_ai_buffer_array_copy</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ai_platform_interface.o(i._platform_ai_buffer_array_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _platform_ai_buffer_array_copy &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[1cd]"></a>_platform_get_table_map_from_buffer</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ai_platform_interface.o(i._platform_get_table_map_from_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _platform_get_table_map_from_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_weights_map
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_activations_map
</UL>

<P><STRONG><a name="[1aa]"></a>_platform_get_table_map_from_buffer_array</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ai_platform_interface.o(i._platform_get_table_map_from_buffer_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_get_table_map_from_buffer_array
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_sane
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_weights_map
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_activations_map
</UL>

<P><STRONG><a name="[1d3]"></a>_platform_network_buffers_signature_valid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ai_platform_interface.o(i._platform_network_buffers_signature_valid))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[1ac]"></a>_platform_network_io_bind</STRONG> (Thumb, 528 bytes, Stack size 48 bytes, ai_platform_interface.o(i._platform_network_io_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _platform_network_io_bind &rArr; _platform_network_state_setup &rArr; get_tensor_byte_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tensor_byte_size
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_to_buffer_fmt
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_data_byte_size
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_setup
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[1b0]"></a>_platform_network_state_setup</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ai_platform_interface.o(i._platform_network_state_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _platform_network_state_setup &rArr; get_tensor_byte_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tensor_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_io_bind
</UL>

<P><STRONG><a name="[1b2]"></a>_platform_network_state_update_input</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ai_platform_interface.o(i._platform_network_state_update_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _platform_network_state_update_input &rArr; st_int8_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[1b4]"></a>_platform_network_state_update_output</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ai_platform_interface.o(i._platform_network_state_update_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _platform_network_state_update_output &rArr; st_int8_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[1dc]"></a>_ai_dict4_dot_array_f32</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, layers_conv2d_generic_float.o(i._ai_dict4_dot_array_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ai_dict4_dot_array_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense
</UL>

<P><STRONG><a name="[1d7]"></a>core_nl_get_params_byte_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.core_nl_get_params_byte_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = core_nl_get_params_byte_size &rArr; ai_array_get_byte_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_if32of32wf32_nl_pool
</UL>

<P><STRONG><a name="[1da]"></a>core_nl_get_params_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.core_nl_get_params_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_if32of32wf32_nl_pool
</UL>

<P><STRONG><a name="[1d9]"></a>core_nl_get_params_stride</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, layers_conv2d_generic_float.o(i.core_nl_get_params_stride))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = core_nl_get_params_stride &rArr; ai_array_get_byte_size
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_if32of32wf32_nl_pool
</UL>

<P><STRONG><a name="[1b5]"></a>_transpose_items</STRONG> (Thumb, 360 bytes, Stack size 112 bytes, layers_generic_float.o(i._transpose_items))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _transpose_items &rArr; st_int8_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_transpose
</UL>

<P><STRONG><a name="[1be]"></a>_ai_forward_layer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, layers.o(i._ai_forward_layer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ai_forward_layer
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_forward_all
</UL>

<P><STRONG><a name="[1df]"></a>_final_pooling_buffer_reorder</STRONG> (Thumb, 124 bytes, Stack size 36 bytes, forward_lite_conv2d_if32of32wf32.o(i._final_pooling_buffer_reorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _final_pooling_buffer_reorder
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_if32of32wf32_pool
</UL>

<P><STRONG><a name="[1e0]"></a>__ai_math_dot_array</STRONG> (Thumb, 304 bytes, Stack size 0 bytes, lite_dense_if32.o(i.__ai_math_dot_array))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dense_if32of32wf32
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
